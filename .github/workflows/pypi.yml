name: Build, Test, and Publish on Tag

on:
  push:
    tags:
      - 'v*'  # Trigger on tags starting with 'v'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11']  # Python versions to test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true  # Ensure submodules are cloned

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Set version in setup.py
        run: |
          TAG_NAME="${{ github.ref }}"; TAG_NAME=${TAG_NAME#refs/tags/}
          sed -i "s/{{VERSION_PLACEHOLDER}}/${TAG_NAME}/g" setup.py
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'

      - name: Set version in setup.py (Windows)
        run: |
          $TAG_NAME="${{ github.ref }}"; $TAG_NAME=$TAG_NAME -replace "refs/tags/", ""
          (Get-Content setup.py) -replace '{{VERSION_PLACEHOLDER}}', $TAG_NAME | Set-Content setup.py
        if: matrix.os == 'windows-latest'

      - name: Install CMake (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake

      - name: Install CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

      - name: Configure and build project
        run: |
          if "${{ matrix.os }}" == "ubuntu-latest"; then
            cmake -S . -B build -DPYTHON_EXECUTABLE=$(which python)
            cmake --build build --config Release
          elif "${{ matrix.os }}" == "windows-latest"; then
            cmake -S . -B build -G "Visual Studio 16 2019" -A x64 -DPYTHON_EXECUTABLE=$(where python)
            cmake --build build --config Release
          fi

      - name: Build wheel
        run: |
          python setup.py bdist_wheel

      - name: Test the wheel
        run: |
          python -m pip install dist/*.whl
          python -m pip list
          python -c "import testpython; print(testpython.greet('NAME'))"

      #- name: Publish to TestPyPI
      #  if: contains(github.ref, 'v')
      #  uses: pypa/gh-action-pypi-publish@master
      #  with:
      #    repository-url: https://test.pypi.org/legacy/
      #    user: __token__
      #    password: ${{ secrets.TEST_PYPI_API_TOKEN }}
